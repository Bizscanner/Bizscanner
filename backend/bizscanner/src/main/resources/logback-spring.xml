<configuration>
    <!-- 로그 패턴 및 색상 지정 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <property name="consoleLogPattern"
              value="[%d{yyyy-MM-dd' T 'HH:mm:ss.SSS}]  %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n"/>

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${consoleLogPattern}</pattern>
        </encoder>
    </appender>

    <!-- root level 설정 -->
    <root level="info">
        <appender-ref ref="console"/>
    </root>

    <!-- 로그 파일이 생성될 경로 지정 -->
    <property name="infoLogPath" value="logs/backend/info"/>
    <property name="warnLogPath" value="logs/backend/warn"/>
    <property name="errorLogPath" value="logs/backend/error"/>

    <!-- 로그 파일 이름 형식 지정 -->
    <property name="fileNamePattern" value="%d{yyyy-MM-dd}_%i.log"/>

    <!-- 로그 패턴 지정 -->
    <property name="logPattern" value="%d{HH:mm:ss.SSS} [%20thread] %-5level %-53logger{36} - %msg%n"/>

    <!-- INFO LOG -->
    <!-- 롤링 패턴 적용(시간 또는 일 단위로 파일을 구분) -->
    <appender name="info-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${infoLogPath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 로그 파일 보관 주기 설정, 보관 주기를 넘어가면 자동으로 삭제-->
            <maxHistory>7</maxHistory>

            <!-- 로그 파일당 최대 용량 설정 -->
            <maxFileSize>1GB</maxFileSize>

            <!-- 전체 파일 크기 설정, 전체 크기 제한을 조과하면 가장 오래된 파일을 삭제 -->
            <totalSizeCap>1GB</totalSizeCap>
            <fileNamePattern>${infoLogPath}/${fileNamePattern}</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- WARN LOG -->
    <appender name="warn-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${warnLogPath}/warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <maxHistory>7</maxHistory>
            <maxFileSize>1GB</maxFileSize>
            <totalSizeCap>1GB</totalSizeCap>
            <fileNamePattern>${warnLogPath}/${fileNamePattern}</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR LOG -->
    <appender name="error-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${errorLogPath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <maxHistory>7</maxHistory>
            <maxFileSize>1GB</maxFileSize>
            <totalSizeCap>1GB</totalSizeCap>
            <fileNamePattern>${errorLogPath}/${fileNamePattern}</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <root level="info">
        <appender-ref ref="info-file"/>
        <appender-ref ref="warn-file"/>
        <appender-ref ref="error-file"/>
    </root>
</configuration>